package appetizer.syntactic;

import java.io.InputStream;
import appetizer.ast.*;

action code {:
	static appetizer.symbol.Symbol symbol(String s) {
		return appetizer.symbol.Symbol.symbol(s);
	}
:};

parser code {:
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer("\tParsing error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

			if (s.left >= 0) {
				m.append(" in line " + (s.left +1 ));
				if (s.right >= 0) {
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}

	public Parser(InputStream inp) {
		this(new Yylex(inp));
	}
:};

terminal			PLUS, MINUS, TIMES, DIVIDE, ASSIGN;
terminal			EQ, NE, LT, GT, LE, GE;
terminal			LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON;
terminal			INT, IF, RETURN;
terminal Integer	NUM;
terminal String		ID;

non terminal Program	program;
non terminal Block		block;
non terminal DeclList	decls;
non terminal Decl		decl;
non terminal StmtList	stmts;
non terminal Stmt		stmt;
non terminal Expr		expr;

precedence right	ASSIGN;
precedence nonassoc	EQ, NE, GT, LT, GE, LE;
precedence left		PLUS, MINUS;
precedence left		TIMES, DIVIDE;

start with program;

program ::= INT ID:i LPAREN RPAREN block:b	{: RESULT = new Program(symbol(i), b); :}
          ;

block ::= LBRACE decls:d stmts:s RBRACE	{: RESULT = new Block(d, s); :}
        ;

decls ::= /* empty */		{: RESULT = null; :}
        | decl:d decls:x	{: RESULT = new DeclList(d, x); :}
        ;

decl ::= INT ID:i SEMICOLON	{: RESULT = new Decl(symbol(i)); :}
       ;

stmts ::= /* empty */		{: RESULT = null; :}
        | stmt:s stmts:x	{: RESULT = new StmtList(s, x); :}
        ;

stmt ::= IF LPAREN expr:e RPAREN stmt:s	{: RESULT = new IfStmt(e, s); :}
       | RETURN expr:e SEMICOLON		{: RESULT = new ReturnStmt(e); :}
       | expr:e SEMICOLON				{: RESULT = e; :}
       | block:b						{: RESULT = b; :}
       ;

expr ::= expr:l PLUS:x expr:r	{: RESULT = new Op(l, Op.OpType.PLUS, r); :}
       | expr:l MINUS:x expr:r	{: RESULT = new Op(l, Op.OpType.MINUS, r); :}
       | expr:l TIMES:x expr:r	{: RESULT = new Op(l, Op.OpType.TIMES, r); :}
       | expr:l DIVIDE:x expr:r	{: RESULT = new Op(l, Op.OpType.DIVIDE, r); :}
       | expr:l EQ:x expr:r		{: RESULT = new Op(l, Op.OpType.EQ, r); :}
       | expr:l NE:x expr:r		{: RESULT = new Op(l, Op.OpType.NE, r); :}
       | expr:l LT:x expr:r		{: RESULT = new Op(l, Op.OpType.LT, r); :}
       | expr:l GT:x expr:r		{: RESULT = new Op(l, Op.OpType.GT, r); :}
       | expr:l LE:x expr:r		{: RESULT = new Op(l, Op.OpType.LE, r); :}
       | expr:l GE:x expr:r		{: RESULT = new Op(l, Op.OpType.GE, r); :}
       | expr:l ASSIGN:x expr:r	{: RESULT = new Op(l, Op.OpType.ASSIGN, r); :}
       | ID:i					{: RESULT = new Var(symbol(i)); :}
       | NUM:n					{: RESULT = new Num(n.intValue()); :}
       | LPAREN expr:e RPAREN	{: RESULT = e; :}
       ;
